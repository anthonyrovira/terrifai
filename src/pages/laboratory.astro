---
import Layout from "@layouts/Layout.astro";
import { getCldImageUrl } from "astro-cloudinary/helpers";
import LaboratoryIcon from "@icons/Laboratory.astro";
import TabsMenu from "@components/TabsMenu.astro";
import Download from "@icons/Download.astro";
import SliderArrows from "@icons/SliderArrows.astro";
import Loader from "@components/Loader.astro";

const { searchParams } = Astro.url;
const id = searchParams.get("id");
if (id == null) return Astro.redirect("/");

const url = getCldImageUrl({ src: id });
---

<Layout title="AI Transformation Laboratory">
  <section data-id={id} class="container mx-auto px-4 py-4">
    <h1 class="flex items-center justify-center text-3xl md:text-4xl text-halloween-purple mb-10 text-center">
      <span class="text-halloween-orange font-zombie tracking-wider">Transformation Laboratory</span>
      <LaboratoryIcon class="w-8 h-8 ml-2" />
    </h1>
    <TabsMenu />

    <div class="my-4">
      <div class="shadow-xl p-4 rounded-lg bg-gray-800">
        <div id="image-comparison" class="relative w-full min-h-[500px] overflow-hidden">
          <img id="original" src={url} alt="Original image" class="w-full h-auto object-contain" />
          <img id="preview" src={url} alt="Preview" class="absolute top-0 left-0 w-full h-full object-contain clip-path-left" />
          <div id="slider" class="absolute top-0 left-1/2 w-1 h-full bg-white cursor-ew-resize">
            <div
              class="absolute top-1/2 left-1/2 w-8 h-8 -mt-4 -ml-4 bg-white rounded-full shadow-md flex items-center justify-center"
            >
              <SliderArrows class="w-4 h-4 text-halloween-gray" />
            </div>
          </div>
        </div>
      </div>

      <!-- Download button -->
      <div class="flex items-center justify-center">
        <button
          id="download-button"
          type="button"
          name="download"
          class="bg-halloween-orange text-white px-4 py-2 mt-4 flex items-center justify-center rounded-md hover:bg-halloween-purple transition-colors"
        >
          <Download class="w-5 h-5 mr-2" />
          <span class="text-sm">Download</span>
        </button>
      </div>
    </div>
  </section>
  <Loader id="image-loader" class="hidden" />
</Layout>

<style>
  .clip-path-left {
    clip-path: inset(0 50% 0 0);
  }
</style>

<script>
  import { setupTabs } from "@scripts/tabs";
  import { setupImageEditor } from "@scripts/imageEditor";

  const section = document.querySelector("section");
  const id = section?.getAttribute("data-id") ?? "";

  document.addEventListener("DOMContentLoaded", () => {
    setupImageEditor(id || "");
    setupTabs();
    setupImageComparison();
  });

  function setupImageComparison() {
    const container: HTMLElement | null = document.getElementById("image-comparison");
    const original: HTMLImageElement | null = document.getElementById("original") as HTMLImageElement;
    const preview: HTMLImageElement | null = document.getElementById("preview") as HTMLImageElement;
    const slider: HTMLElement | null = document.getElementById("slider");

    if (!container || !preview || !slider || !original) return;

    // wait for the original image to load
    original.onload = () => {
      const aspectRatio = original.naturalWidth / original.naturalHeight;
      container.style.aspectRatio = aspectRatio.toString();

      // initial position of the slider
      slider.style.left = "50%";
      preview.style.clipPath = "inset(0 50% 0 0)";
    };

    let isDragging = false;

    const move = (e: MouseEvent | TouchEvent) => {
      if (!isDragging) return;
      e.preventDefault(); // prevent text selection

      const rect = container.getBoundingClientRect();
      const clientX = e instanceof MouseEvent ? e.clientX : e.touches[0].clientX;
      const x = Math.max(0, Math.min(clientX - rect.left, rect.width));
      const percent = (x / rect.width) * 100;

      slider.style.left = `${percent}%`;
      preview.style.clipPath = `inset(0 ${100 - percent}% 0 0)`;
    };

    slider.addEventListener("mousedown", (e) => {
      isDragging = true;
      e.preventDefault(); // prevent text selection
    });

    window.addEventListener("mousemove", move);
    window.addEventListener("mouseup", () => (isDragging = false));
    window.addEventListener("mouseleave", () => (isDragging = false));

    // touch events
    slider.addEventListener("touchstart", (e) => {
      e.preventDefault();
      isDragging = true;
    });
    window.addEventListener("touchmove", move);
    window.addEventListener("touchend", () => (isDragging = false));

    // prevent text selection on container
    container.style.userSelect = "none";
  }
</script>
